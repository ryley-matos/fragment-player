{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["getFragmentIdx","fragments","seconds","startAt","endAt","FragmentPlayerContext","React","children","useState","currentTime","setCurrentTime","playing","setPlaying","useMemo","totalLength","enrichedFragments","tmpLength","f","tmp","enrichFragments","currentFragmentIdx","videoRefs","videos","id","ref","src","playsInline","muted","style","width","position","top","left","zIndex","onTimeUpdate","newTime","console","useEffect","diff","Video","value","seekTo","newFragment","togglePlay","FRAGMENTS","fragmentBegin","fragmentEnd","App","visible","edit","setEdit","data","setData","JSON","parse","stringify","slice","loadVideo","Consumer","margin","onClick","extra","height","type","min","max","onChange","e","parseInt","target","ReactDOM","render","document","getElementById"],"mappings":"qtCAOA,IAWMA,EAAiB,SAACC,EAAWC,GAAZ,OAAwBD,EAAA,WAAoB,gBAAEE,EAAF,UAAWC,EAAX,eAAsBF,MAAsBA,GAA5C,MAE7DG,EAAwBC,sB,MAU9B,SAAgC,GAAuB,IAAtBC,EAAsB,EAAtBA,SAAUN,EAAY,EAAZA,UAAY,EAEfO,mBAFe,GAE9CC,EAF8C,KAEjCC,EAFiC,OAIvBF,qBAAvBG,EAJ8C,KAIrCC,EAJqC,OAMZC,mBAAQ,kBA7B3B,SAACZ,GACvB,IAAIa,EAAJ,EACMC,EAAiB,OAAGd,QAAH,IAAGA,OAAH,EAAGA,EAAA,KAAe,YACvC,IAAMe,EAAYC,cAAgBA,EAAlC,cACMC,EAAM,EAAH,MAAUf,QAAV,EAAgCC,MAAOU,EAAcE,IAE9D,OADAF,KACA,KAEF,MAAO,CAACA,YAAD,EAAcC,qBAqBkCI,CAAN,KAAkC,CAN9B,IAM9CL,EAN8C,cAMjCC,EANiC,oBAQ/CK,EAAqBP,mBAAQ,kBAAMb,EAAee,EAArB,MAE7BM,EAAYR,mBAAQ,WAExB,IADA,IACA,EADIK,EAAJ,GACA,sBAAyB,KAAhBD,EAAgB,QACvBC,EAAI,YAAYD,EAAb,kBAAgCA,EAAnCC,aAAsDZ,IAAtDY,YAEF,WACC,CANH,IAQMI,EAAST,mBAAQ,kBACrBE,EAAA,KAAsB,cACpB,IAAMQ,EAAK,YAAYN,EAAf,kBAAkCA,EAA1C,YACA,OACE,2BACEO,IAAKH,EADP,GAEEE,GAFF,EAGEE,IAAQR,EAAL,UAAgBA,EAAhB,kBAAmCA,EAHxC,YAIES,aAJF,EAKEC,MALF,OAMEC,MAAO,CAACC,MAAD,OAAgBC,SAAhB,WAAsCC,IAAtC,EAA8CC,KAA9C,EAAuDC,OAAQb,SAAkC,GACxGc,aAAc,WACZ,GAAIvB,GAAWS,IAAf,EAA2C,SACnCe,GAAU,UAAAd,EAAA,wEAAsCJ,EAAtC,cAAwDA,EAAxE,QACAmB,YAAY,CAACD,QAAD,EAAUrB,gBAClBqB,GAAJ,GACEzB,KACAE,OAGAF,cAOX,CAACK,EAAmBJ,EA3BvB,IA6BA0B,qBAAU,WACR,IAAMpB,EAAIF,EAAV,GAEA,IAAK,IAAL,KADAqB,eACA,EAA2B,SACzB,UAAAf,EAAA,6DAEF,GAAIJ,GAAJ,EAAkB,SACVM,EAAK,YAAYN,EAAf,kBAAkCA,EAA1C,YACAmB,+BACA,IAAME,EAAO7B,EAAcQ,EAA3B,QACAI,yBAAoCJ,gBAApCI,EACA,UAAAA,EAAA,+DAED,CAACD,EAbJiB,IAeA,IA+BME,EAAQ1B,mBACZ,kBACE,yBAAKe,MAAO,CAACE,SAAU,aADzB,KAIE,CALJ,IAOA,OACE,kBAACzB,EAAD,UACEmC,MAAO,CACLD,MADK,EAELzB,YAFK,EAGLL,YAHK,EAILE,QAJK,EAKLI,kBALK,EAML0B,OA9CS,SAACvC,GACd,IAAK,IAAL,OAA2B,SACzB,UAAAmB,EAAA,6DAEF,IAMa,IANPqB,EAAc3B,EAClBf,EAAee,EADjB,IAGMQ,EAAK,YAAYmB,EAAf,kBAA4CA,EAApD,YACMJ,EAAOpC,EAAUwC,EAAvB,SACArB,yBAAoCqB,gBAApCrB,EACA,KACE,UAAAA,EAAA,6DAEFX,MAkCIiC,WA/Ba,WACjB,KAAa,SACL1B,EAAIF,EAAV,GACMQ,EAAK,YAAYN,EAAf,kBAAkCA,EAA1C,YACA,UAAAI,EAAA,6DACAT,UAEG,SACGK,EAAIF,EAAV,GACMQ,EAAK,YAAYN,EAAf,kBAAkCA,EAA1C,YACA,UAAAI,EAAA,4DACAT,UAWJ,IC/HIgC,EAAY,CAChB,CACEnB,IAAK,oGACLoB,cAAe,EACfC,YAAa,GAEf,CACErB,IAAK,oFACLoB,cAAe,EACfC,YAAa,IAEf,CACErB,IAAK,2FACLoB,cAAe,EACfC,YAAa,IA8BFC,EA1BH,WAAO,IAAD,EACevC,oBAAS,GADxB,mBACTwC,EADS,aAEQxC,oBAAS,IAFjB,mBAETyC,EAFS,KAEHC,EAFG,OAGQ1C,mBAAS,CAC/BP,UAAW2C,IAJG,mBAGTO,EAHS,KAGHC,EAHG,KAMVnD,EAAYoD,KAAKC,MAAMD,KAAKE,UAAL,OAAeJ,QAAf,IAAeA,OAAf,EAAeA,EAAMlD,YAClD,OACE,kBAAC,EAAD,CAAwBA,UAAWgD,EAAI,sBAAOhD,EAAUuD,MAAM,EAAG,IAA1B,4BAAkCvD,EAAU,IAA5C,IAAgD6C,YAAa7C,EAAU,GAAG6C,YAAc,MAAxF,YAAgG7C,EAAUuD,MAAM,KAAMvD,EAAWwD,UAAWT,GACjL,kBAAC3C,EAAsBqD,SAAvB,MACG,YAAqE,IAAnEnB,EAAkE,EAAlEA,MAAOE,EAA2D,EAA3DA,OAAQhC,EAAmD,EAAnDA,YAAaK,EAAsC,EAAtCA,YAAaH,EAAyB,EAAzBA,QAASgC,EAAgB,EAAhBA,WACnD,OACE,yBAAKf,MAAO,CAACC,MAAO,MAAO8B,OAAQ,SACjC,4BAAQC,QAAS,kBAAMV,GAASD,KAAhC,iBACA,4BAAQW,QAASjB,GAAahC,EAAU,QAAU,QAClD,4BAAQiD,QAAS,kBAAMR,EAAQ,2BAAID,GAAL,IAAWU,QAAY,OAAJV,QAAI,IAAJA,OAAA,EAAAA,EAAMU,QAAS,IAAM,YAAtE,eACA,yBAAKjC,MAAO,CAACC,MAAO,KAAMiC,OAAQ,MAAQvB,GAC1C,2BAAOX,MAAO,CAACC,MAAO,QAASkC,KAAK,QAAQC,IAAK,EAAGC,IAAKnD,EAAa0B,MAAO/B,EAAayD,SAAU,SAACC,GAAD,OAAO1B,EAAO2B,SAASD,EAAEE,OAAO7B,iBChClJ8B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.dd31f347.chunk.js","sourcesContent":["import React, {useMemo, useState, useEffect}  from 'react';\n\n/*\n  Very roughly based off totimedli's solution on stack overflow:\n    https://stackoverflow.com/questions/34097834/html5-video-how-to-do-a-seamless-play-and-or-loop-of-several-videos\n*/\n\nconst enrichFragments = (fragments) => {\n  var totalLength = 0\n  const enrichedFragments = fragments?.map((f) => {\n    const tmpLength = f.fragmentEnd - f.fragmentBegin\n    const tmp = {...f, startAt: totalLength, endAt: totalLength + tmpLength}\n    totalLength += tmpLength\n    return tmp\n  })\n  return {totalLength, enrichedFragments}\n}\n\nconst getFragmentIdx = (fragments, seconds) => fragments.findIndex(({startAt, endAt}) => seconds >= startAt && seconds <= endAt)\n\nconst FragmentPlayerContext = React.createContext({})\n\n/*\n  Fragment:\n    fragmentBegin: seconds (relative to original video)\n    fragmentEnd: seconds (relative to original video)\n    src: video source\n*/\n\n\nfunction FragmentPlayerProvider({children, fragments}) {\n\n  const [currentTime, setCurrentTime] = useState(0)\n\n  const [playing, setPlaying] = useState()\n\n  const {totalLength, enrichedFragments} = useMemo(() => enrichFragments(fragments), [fragments])\n\n  const currentFragmentIdx = useMemo(() => getFragmentIdx(enrichedFragments, currentTime))\n\n  const videoRefs = useMemo(() => {\n    let tmp = {}\n    for (var f of fragments) {\n      tmp[`fragment-${f.fragmentBegin}-${f.fragmentEnd}`] = React.createRef()\n    }\n    return tmp\n  }, [fragments])\n  \n  const videos = useMemo(() => (\n    enrichedFragments.map((f, idx) => {\n      const id = `fragment-${f.fragmentBegin}-${f.fragmentEnd}`\n      return (\n        <video \n          ref={videoRefs[id]} \n          id={id} \n          src={`${f.src}#t=${f.fragmentBegin},${f.fragmentEnd}`}\n          playsInline \n          muted={\"true\"}\n          style={{width: '100%', position: 'absolute', top: 0, left: 0, zIndex: currentFragmentIdx === idx ? 10 : 0}}\n          onTimeUpdate={() => {\n            if (playing && currentFragmentIdx === idx) {\n              const newTime = videoRefs[id]?.current?.currentTime - f.fragmentBegin + f.startAt\n              console.log({newTime, totalLength})\n              if (newTime >= totalLength) {\n                setCurrentTime(totalLength)\n                setPlaying(false)\n              }\n              else {\n                setCurrentTime(newTime)\n              }\n            }\n          }}\n        />\n      )\n    })\n  ), [enrichedFragments, playing, currentFragmentIdx])\n\n  useEffect(() => {\n    const f = enrichedFragments[currentFragmentIdx]\n    console.log(f)\n    for (var key in videoRefs) {\n      videoRefs[key]?.current?.pause()\n    }\n    if (f && playing) {\n      const id = `fragment-${f.fragmentBegin}-${f.fragmentEnd}`\n      console.log('f.currentTime', currentTime)\n      const diff = currentTime - f.startAt\n      videoRefs[id].current.currentTime = f.fragmentBegin + diff\n      videoRefs[id]?.current?.play()\n    }\n  }, [currentFragmentIdx, playing])\n\n  const seekTo = (seconds) => {\n    for (var key in videoRefs) {\n      videoRefs[key]?.current?.pause()\n    }\n    const newFragment = enrichedFragments[\n      getFragmentIdx(enrichedFragments, seconds)\n    ]\n    const id = `fragment-${newFragment.fragmentBegin}-${newFragment.fragmentEnd}`\n    const diff = seconds - newFragment.startAt\n    videoRefs[id].current.currentTime = newFragment.fragmentBegin + diff\n    if (playing) {\n      videoRefs[id]?.current?.play()\n    }\n    setCurrentTime(seconds)\n  }\n\n  const togglePlay = () => {\n    if (playing) {\n      const f = enrichedFragments[currentFragmentIdx]\n      const id = `fragment-${f.fragmentBegin}-${f.fragmentEnd}`\n      videoRefs[id]?.current?.pause()\n      setPlaying(false)\n    }\n    else {\n      const f = enrichedFragments[currentFragmentIdx]\n      const id = `fragment-${f.fragmentBegin}-${f.fragmentEnd}`\n      videoRefs[id]?.current?.play()\n      setPlaying(true)\n    }\n  }\n\n  const Video = useMemo(\n    () => (\n      <div style={{position: 'relative'}}>\n        {videos}\n      </div>\n   ), [videos])\n\n  return (\n    <FragmentPlayerContext.Provider\n      value={{\n        Video,\n        totalLength,\n        currentTime,\n        playing,\n        enrichedFragments,\n        seekTo,\n        togglePlay,\n      }}\n    >\n      {children}\n    </FragmentPlayerContext.Provider>\n  );\n}\n\nexport default FragmentPlayerProvider\nexport { FragmentPlayerContext }\n","import React, { useState } from 'react'\nimport FragmentPlayerProvider, {FragmentPlayerContext} from 'fragment-player'\n\nconst FRAGMENTS = [\n  {\n    src: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/SubaruOutbackOnStreetAndDirt.mp4',\n    fragmentBegin: 0,\n    fragmentEnd: 5,\n  },\n  {\n    src: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4',\n    fragmentBegin: 1,\n    fragmentEnd: 25,\n  },\n  {\n    src: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/WeAreGoingOnBullrun.mp4',\n    fragmentBegin: 1,\n    fragmentEnd: 3,\n  },\n]\n  \nconst App = () => {\n  const [visible, setVisisble] = useState(false)\n  const [edit, setEdit] = useState(false)\n  const [data, setData] = useState({\n    fragments: FRAGMENTS,\n  })\n  const fragments = JSON.parse(JSON.stringify(data?.fragments))\n  return (\n    <FragmentPlayerProvider fragments={edit ? [...fragments.slice(0, 1), {...fragments[1], fragmentEnd: fragments[1].fragmentEnd + 10}, ...fragments.slice(2)] : fragments} loadVideo={visible}>\n      <FragmentPlayerContext.Consumer>\n        {({Video, seekTo, currentTime, totalLength, playing, togglePlay}) => {\n          return (\n            <div style={{width: '75%', margin: 'auto'}}>\n              <button onClick={() => setEdit(!edit)}>Simulate Edit</button>\n              <button onClick={togglePlay}>{playing ? 'Pause' : 'Play'}</button>\n              <button onClick={() => setData({...data, extra: (data?.extra || '') + 'asdf'})}>change data</button>\n              <div style={{width: 1600, height: 900}} >{Video}</div>\n              <input style={{width: '100%'}} type=\"range\" min={0} max={totalLength} value={currentTime} onChange={(e) => seekTo(parseInt(e.target.value))}/>\n            </div>\n          )\n        }}\n      </FragmentPlayerContext.Consumer>\n    </FragmentPlayerProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}