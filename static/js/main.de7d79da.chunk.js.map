{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["getFragmentIdx","fragments","seconds","startAt","endAt","FragmentPlayerContext","React","children","loadVideo","canvasRef","useRef","contentRef","drawInterval","useState","playing","setPlaying","currentTime","setCurrentTime","useMemo","totalLength","enrichedFragments","tmpLength","f","tmp","enrichFragments","currentVideoIdx","width","height","setSize","ready","setReady","loadedIdx","setLoadedWrapper","useEffect","vidContainer","document","setLoadedIdx","idx","togglePlay","videos","video","style","ref","onClick","useLayoutEffect","onResize","clientHeight","window","id","cached","fragmentDummy","loadVidIdx","v","onCanPlay","fragment","ctx","clearInterval","setInterval","newTime","value","seekTo","src","fragmentBegin","fragmentEnd","App","visible","setVisisble","edit","setEdit","slice","Consumer","margin","type","min","max","onChange","e","parseInt","target","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.de7d79da.chunk.js","sourcesContent":["import React, { useRef, useMemo, useState, useEffect, useLayoutEffect, useCallback }  from 'react';\n\n/*\n  Very roughly based off totimedli's solution on stack overflow:\n    https://stackoverflow.com/questions/34097834/html5-video-how-to-do-a-seamless-play-and-or-loop-of-several-videos\n*/\n\nconst enrichFragments = (fragments) => {\n  var totalLength = 0\n  const enrichedFragments = fragments?.map((f) => {\n    const tmpLength = f.fragmentEnd - f.fragmentBegin\n    const tmp = {...f, startAt: totalLength, endAt: totalLength + tmpLength}\n    totalLength += tmpLength\n    return tmp\n  })\n  return {totalLength, enrichedFragments}\n}\n\nconst getFragmentIdx = (fragments, seconds) => fragments.findIndex(({startAt, endAt}) => seconds >= startAt && seconds <= endAt)\n\nconst FragmentPlayerContext = React.createContext({})\n\n/*\n  Fragment:\n    fragmentBegin: seconds (relative to original video)\n    fragmentEnd: seconds (relative to original video)\n    src: video source\n*/\n\nconst usePrev = value => {\n  const ref = useRef()\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n\n\nfunction FragmentPlayerProvider({children, fragments, loadVideo}) {\n  const canvasRef = useRef()\n  const contentRef = useRef()\n  const drawInterval = useRef()\n  const [playing, setPlaying] = useState(false)\n  const [currentTime, setCurrentTime] = useState(0)\n  const {totalLength, enrichedFragments} = useMemo(() => enrichFragments(fragments), [fragments])\n  const currentVideoIdx = getFragmentIdx(enrichedFragments, currentTime)\n  const [{ width, height }, setSize] = useState({})\n  const [ready, setReady] = useState(false)\n  const [loadedIdx, setLoadedWrapper] = useState(-1)\n\n  useEffect(() => {\n    const vidContainer = document.createElement('div')\n    vidContainer.style.display = 'none'\n    vidContainer.id = 'fragment-dummy'\n    document.body.appendChild(\n      vidContainer\n    )\n    return () => document.body.removeChild(vidContainer)\n  }, [])\n\n  const setLoadedIdx = (idx) => {\n    setLoadedWrapper(idx)\n  }\n\n  const togglePlay = () => {\n    if (playing) {\n      setPlaying(false)\n      videos[currentVideoIdx].pause()\n    }\n    else {\n      setPlaying(true)\n      videos[currentVideoIdx].play()\n    }\n  }\n\n  const video = loadVideo ? \n    <div style={{width: '100%', height: '100%', }} ref={contentRef}>\n      <canvas ref={canvasRef} style={{width: '100%'}}  onClick={togglePlay}/>\n    </div>\n    :\n    null\n\n  useLayoutEffect(() => {\n    const onResize = () => {\n      setSize({\n        width: contentRef?.current?.clientWidth,\n        height: contentRef?.current?.clientHeight,\n      })\n    }\n    window.addEventListener('resize', onResize)\n    return () => window.removeEventListener('resize', onResize)\n  })\n\n  useEffect(() => {\n    setSize({\n      width: contentRef?.current?.clientWidth,\n      height: contentRef?.current?.clientHeight,\n    })\n  }, [canvasRef?.current, contentRef?.current, loadVideo, ready])\n\n  const videos = useMemo(() => {\n    setReady(false)\n    return loadVideo ? enrichedFragments?.map((f, idx) => {\n      const id = `${f.fragmentBegin}-${f.fragmentEnd}-${f.src}`\n      const cached = document.getElementById(id)\n      const tmp = cached || document.createElement('video')\n      if (!idx && !cached) {\n        tmp.src = f.src\n        tmp.preload = \"auto\"\n        tmp.currentTime = f.fragmentBegin\n        tmp.load()\n        tmp.onloadeddata = () => {\n          setReady(true)\n          setLoadedIdx(idx)\n        }\n      } else if (!idx) {\n        setReady(true)\n      }\n      if (!cached) {\n        tmp.id = id\n        const fragmentDummy = document.getElementById('fragment-dummy')\n        fragmentDummy.appendChild(tmp)\n      }\n      return tmp\n    }) : []\n  }, [enrichedFragments, canvasRef?.current, loadVideo])\n\n  useEffect(() => {\n    const loadVidIdx = loadedIdx + 1\n    const v = videos[loadVidIdx]\n    const f = enrichedFragments[loadVidIdx]\n    if (v) {\n      v.src = f.src\n      v.preload=\"auto\"\n      v.currentTime = f.fragmentBegin\n      v.load()\n      v.onloadeddata = () => {\n        setLoadedIdx(loadVidIdx)\n      }\n    }\n  }, [loadedIdx])\n  \n\n  useEffect(() => {\n    const video = videos[currentVideoIdx]\n    if (!video) {\n      return\n    }\n    const onCanPlay = () => video.play()\n    if (playing && video) {\n      video.addEventListener('canplay', onCanPlay)\n    }\n    return () => {\n      video.pause()\n      video.removeEventListener('canplay', onCanPlay)\n    }\n  }, [enrichedFragments, currentVideoIdx, playing, videos])\n\n\n  const seekTo = (seconds) => {\n    const newIdx = getFragmentIdx(enrichedFragments, currentTime)\n    if (newIdx === currentVideoIdx) {\n      const fragment = enrichedFragments[currentVideoIdx]\n      videos[currentVideoIdx].currentTime = seconds - fragment.startAt + fragment?.fragmentBegin\n    }\n    setCurrentTime(seconds)\n  }\n\n  useEffect(() => {\n    if (playing) {\n      videos[currentVideoIdx].play()\n    }\n  }, [currentVideoIdx, currentTime, playing])\n\n  useEffect(() => {\n    for (var v of videos) {\n      v.pause()\n    }\n    if (!videos[currentVideoIdx] || !ready || !canvasRef?.current || !video) {\n      return\n    }\n    const fragment = enrichedFragments[currentVideoIdx]\n    videos[currentVideoIdx].currentTime = currentTime - fragment.startAt + fragment?.fragmentBegin\n\n    canvasRef.current.width = width\n    canvasRef.current.height = height\n    const ctx = canvasRef?.current?.getContext('2d')\n\n    ctx.drawImage(videos[currentVideoIdx],0, 0, width, height)\n    clearInterval(drawInterval?.current)\n    drawInterval.current = setInterval(() => {\n      const newTime = videos[currentVideoIdx]?.currentTime - enrichedFragments[currentVideoIdx]?.fragmentBegin + enrichedFragments[currentVideoIdx]?.startAt\n      if (newTime >= totalLength) {\n        setCurrentTime(totalLength)\n        togglePlay()\n      }\n      else if (newTime <= 0) {\n        setCurrentTime(0)\n        togglePlay()\n      }\n      else {\n        setCurrentTime(newTime)\n      }\n      ctx.drawImage(videos[currentVideoIdx],0, 0, width, height)\n    }, 30)\n  }, [enrichedFragments, currentVideoIdx, width, height, ready])\n\n  useEffect(() => {\n    if (!loadVideo && videos) {\n        setPlaying(false)\n    }\n  }, [loadVideo, videos, contentRef?.current])\n    \n  \n  return (\n    <FragmentPlayerContext.Provider\n      value={{\n        seekTo,\n        togglePlay,\n        setPlaying,\n        ready,\n        currentTime,\n        totalLength,\n        video,\n        videos,\n        playing,\n        currentVideoIdx,\n      }}\n    >\n      {children}\n    </FragmentPlayerContext.Provider>\n  );\n}\n\nexport default FragmentPlayerProvider\nexport { FragmentPlayerContext }\n","import React, { useState } from 'react'\nimport FragmentPlayerProvider, {FragmentPlayerContext} from 'fragment-player'\n\nconst fragments = [\n  {\n    src: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/SubaruOutbackOnStreetAndDirt.mp4',\n    fragmentBegin: 0,\n    fragmentEnd: 5,\n  },\n  {\n    src: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4',\n    fragmentBegin: 1,\n    fragmentEnd: 25,\n  },\n  {\n    src: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/WeAreGoingOnBullrun.mp4',\n    fragmentBegin: 1,\n    fragmentEnd: 3,\n  },\n]\n\nconst App = () => {\n  const [visible, setVisisble] = useState(false)\n  const [edit, setEdit] = useState(false)\n  return (\n    <FragmentPlayerProvider fragments={edit ? [{...fragments[0], fragmentEnd: 25}, ...fragments.slice(1)] : fragments} loadVideo={visible}>\n      <FragmentPlayerContext.Consumer>\n        {({seekTo, currentTime, totalLength, video , setPlaying, ready}) => {\n          return (\n            <div style={{width: '75%', margin: 'auto'}}>\n              <button onClick={() => setVisisble(true)}>Show Video</button>\n              <button onClick={() => setEdit(!edit)}>Simulate Edit</button>\n              <button onClick={() => setPlaying(true)}>Play</button>\n              <button onClick={() => setPlaying(false)}>Pause</button>\n              {video}\n              <input style={{width: '100%'}} type=\"range\" min={0} max={totalLength} value={currentTime} onChange={(e) => seekTo(parseInt(e.target.value))}/>\n              <div>{ready ? 'Video Ready' : 'Video Loading...'}</div>\n            </div>\n          )\n        }}\n      </FragmentPlayerContext.Consumer>\n    </FragmentPlayerProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}