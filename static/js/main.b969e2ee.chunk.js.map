{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["getFragmentIdx","fragments","seconds","startAt","endAt","FragmentPlayerContext","React","children","loadVideo","canvasRef","useRef","contentRef","drawInterval","useState","playing","setPlaying","currentTime","setCurrentTime","useMemo","totalLength","enrichedFragments","tmpLength","f","tmp","enrichFragments","currentVideoIdx","width","height","setSize","ready","setReady","useLayoutEffect","onResize","clientHeight","window","useEffect","videos","document","ctx","video","onCanPlay","console","idx","togglePlay","fragment","clearInterval","setInterval","style","ref","onClick","v","value","seekTo","src","fragmentBegin","fragmentEnd","App","visible","setVisisble","Consumer","type","min","max","onChange","e","parseInt","target","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b969e2ee.chunk.js","sourcesContent":["import React, { useRef, useMemo, useState, useEffect, useLayoutEffect, useCallback }  from 'react';\n\n/*\n  Very roughly based off totimedli's solution on stack overflow:\n    https://stackoverflow.com/questions/34097834/html5-video-how-to-do-a-seamless-play-and-or-loop-of-several-videos\n*/\n\nconst enrichFragments = (fragments) => {\n  var totalLength = 0\n  const enrichedFragments = fragments?.map((f) => {\n    const tmpLength = f.fragmentEnd - f.fragmentBegin\n    const tmp = {...f, startAt: totalLength, endAt: totalLength + tmpLength}\n    totalLength += tmpLength\n    return tmp\n  })\n  return {totalLength, enrichedFragments}\n}\n\nconst getFragmentIdx = (fragments, seconds) => fragments.findIndex(({startAt, endAt}) => seconds >= startAt && seconds <= endAt)\n\nconst FragmentPlayerContext = React.createContext({})\n\n/*\n  Fragment:\n    fragmentBegin: seconds (relative to original video)\n    fragmentEnd: seconds (relative to original video)\n    src: video source\n*/\n\nfunction FragmentPlayerProvider({children, fragments, loadVideo}) {\n  const canvasRef = useRef()\n  const contentRef = useRef()\n  const drawInterval = useRef()\n  const [playing, setPlaying] = useState(false)\n  const [currentTime, setCurrentTime] = useState(0)\n  const {totalLength, enrichedFragments} = useMemo(() => enrichFragments(fragments), [fragments])\n  const currentVideoIdx = getFragmentIdx(enrichedFragments, currentTime)\n  const [{ width, height }, setSize] = useState({})\n  const [ready, setReady] = useState(false)\n\n  useLayoutEffect(() => {\n    const onResize = () => {\n      setSize({\n        width: contentRef?.current?.clientWidth,\n        height: contentRef?.current?.clientHeight,\n      })\n    }\n    window.addEventListener('resize', onResize)\n    return () => window.removeEventListener('resize', onResize)\n  })\n\n  useEffect(() => {\n    setSize({\n      width: contentRef?.current?.clientWidth,\n      height: contentRef?.current?.clientHeight,\n    })\n  }, [canvasRef?.current, contentRef?.current, loadVideo])\n\n  const videos = useMemo(() => enrichedFragments?.map((f, idx) => {\n    const tmp = document.createElement('video')\n    tmp.src = f.src\n    tmp.preload = \"auto\"\n    tmp.currentTime = f.fragmentBegin\n    if (!idx) {\n      tmp.load()\n      tmp.onloadeddata = () => {\n        setReady(true)\n        if (canvasRef?.current) {\n          const ctx = canvasRef?.current?.getContext('2d')\n          ctx.drawImage(videos[currentVideoIdx] ,0, 0, width, height)\n        }\n      }\n    }\n    return tmp\n  }), [enrichedFragments, canvasRef?.current, loadVideo])\n  \n\n  useEffect(() => {\n    const video = videos[currentVideoIdx]\n    if (!video) {\n      return\n    }\n    const onCanPlay = () => video.play()\n    if (playing && video) {\n      video.addEventListener('canplay', onCanPlay)\n    }\n    if (video.readyState !== 4) {\n      video.load()\n    }\n    return () => {\n      video.pause()\n      video.removeEventListener('canplay', onCanPlay)\n    }\n  }, [enrichedFragments, currentVideoIdx, playing, videos])\n\n  useEffect(() => {\n    if (ready) {\n      console.log('Fragment Player Ready!' )\n      videos.slice(1)?.map((video, idx) => {\n        const tmp = video\n        tmp.load()\n        tmp.onloadeddata = () => {\n          console.log('loaded fragment ', idx + 1)\n        }\n      })\n    }\n    else {\n      console.log('Fragment Player Intializing...')\n    }\n  }, [ready, canvasRef?.current])\n\n\n  const seekTo = (seconds) => {\n    console.log('seeking to', seconds)\n    const newIdx = getFragmentIdx(enrichedFragments, currentTime)\n    if (newIdx === currentVideoIdx) {\n      const fragment = enrichedFragments[currentVideoIdx]\n      videos[currentVideoIdx].currentTime = seconds - fragment.startAt + fragment?.fragmentBegin\n    }\n    console.log('setting current time', seconds)\n    setCurrentTime(seconds)\n  }\n\n  const togglePlay = () => {\n    if (playing) {\n      setPlaying(false)\n      videos[currentVideoIdx].pause()\n    }\n    else {\n      setPlaying(true)\n      videos[currentVideoIdx].play()\n    }\n  }\n\n  useEffect(() => {\n    if (playing) {\n      videos[currentVideoIdx].play()\n    }\n  }, [currentVideoIdx, currentTime, playing])\n\n  useEffect(() => {\n    for (var video of videos) {\n      video.pause()\n    }\n    if (!videos[currentVideoIdx] || !ready || !canvasRef?.current) {\n      return\n    }\n    const fragment = enrichedFragments[currentVideoIdx]\n    videos[currentVideoIdx].currentTime = currentTime - fragment.startAt + fragment?.fragmentBegin\n\n    canvasRef.current.width = width\n    canvasRef.current.height = height\n    const ctx = canvasRef?.current?.getContext('2d')\n\n    ctx.drawImage(videos[currentVideoIdx],0, 0, width, height)\n    clearInterval(drawInterval?.current)\n    drawInterval.current = setInterval(() => {\n      const newTime = videos[currentVideoIdx]?.currentTime - enrichedFragments[currentVideoIdx]?.fragmentBegin + enrichedFragments[currentVideoIdx]?.startAt\n      if (newTime >= totalLength) {\n        setCurrentTime(totalLength)\n        togglePlay()\n      }\n      else {\n        setCurrentTime(videos[currentVideoIdx]?.currentTime - enrichedFragments[currentVideoIdx]?.fragmentBegin + enrichedFragments[currentVideoIdx]?.startAt)\n      }\n      ctx.drawImage(videos[currentVideoIdx],0, 0, width, height)\n    }, 30)\n  }, [enrichedFragments, currentVideoIdx, width, height, ready, canvasRef?.current])\n\n  const video = loadVideo ? \n    <div style={{width: '100%', height: '100%', }} ref={contentRef}>\n      <canvas ref={canvasRef} style={{width: '100%'}}  onClick={togglePlay}/>\n    </div>\n    :\n    null\n\n  useEffect(() => {\n    if (loadVideo && videos) {\n      videos[currentVideoIdx].load()\n      videos[currentVideoIdx].onloadeddata = () => {\n        const ctx = canvasRef?.current?.getContext('2d')\n        ctx.drawImage(videos[currentVideoIdx],0, 0, width, height)\n      }\n    }\n    if (!loadVideo && videos) {\n        setPlaying(false)\n        for (var v of videos) {\n          v.pause()\n        }\n    }\n  }, [loadVideo, videos])\n    \n  \n  return (\n    <FragmentPlayerContext.Provider\n      value={{\n        seekTo,\n        togglePlay,\n        currentTime,\n        totalLength,\n        video,\n        videos,\n        playing,\n      }}\n    >\n      {children}\n    </FragmentPlayerContext.Provider>\n  );\n}\n\nexport default FragmentPlayerProvider\nexport { FragmentPlayerContext }\n","import React, { useState } from 'react'\nimport FragmentPlayerProvider, {FragmentPlayerContext} from 'fragment-player'\n\nconst fragments = [\n  {\n    src: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/SubaruOutbackOnStreetAndDirt.mp4',\n    fragmentBegin: 0,\n    fragmentEnd: 5,\n  },\n  {\n    src: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4',\n    fragmentBegin: 1,\n    fragmentEnd: 25,\n  },\n  {\n    src: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/WeAreGoingOnBullrun.mp4',\n    fragmentBegin: 1,\n    fragmentEnd: 3,\n  },\n]\n\nconst App = () => {\n  const [visible, setVisisble] = useState(false)\n  return (\n    <FragmentPlayerProvider fragments={fragments} loadVideo={visible}>\n      <FragmentPlayerContext.Consumer>\n        {({video, seekTo, currentTime, totalLength, }) => {\n          return (\n            <div style={{width: '100%'}}>\n              <button onClick={() => setVisisble(!visible)}>Show Video</button>\n              {video}\n              <input style={{width: '100%'}} type=\"range\" min={0} max={totalLength} value={currentTime} onChange={(e) => seekTo(parseInt(e.target.value))}/>\n            </div>\n          )\n        }}\n      </FragmentPlayerContext.Consumer>\n    </FragmentPlayerProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}